Difference deployment and replicaset: deployment follow the statergy of rolling update and replicaset follow the statergy of recreate. when we need to change the version then in replicaset all replica goes to 0 which cause some downtime but in case of deployment it follow rolling update.

Diffrence between deployment and demaonset: Daemonset will not run more than one replica per node. Another advantage of using a Daemonset is that, if you add a node to the cluster, then the Daemonset will automatically spawn a pod on that node, which a deployment will not do.

Difference between replicaset and daemonset: ReplicaSets should be used when your application is completely decoupled from the node and you can run multiple copies on a given node without special consideration. DaemonSets should be used when a single copy of your application must run on all or a subset of the nodes in the cluster.

Difference between deployment and statefulset: In a deployment, the replicas all share a volume and PVC, while in a StatefulSet each pod has its own volume and PVC.

DaemonSet:  ensures that all (or some) Nodes run a copy of a Pod. As nodes are added to the cluster, Pods are added to them.

PersistentVolumeClaim (PVC):  is a request for storage by a user. It is similar to a Pod. Pods consume node resources and PVCs consume PV resources. Pods can request specific levels of resources (CPU and Memory).

Does StatefulSet create ReplicaSet?
As a StatefulSet does not create a ReplicaSet, the pod replicas cannot be rolled back to previous versions. StatefulSets are typically used for applications that require persistent storage for stateful workloads, and ordered, automated rolling updates.

Difference between StatefulSet and stateless?
A StatefulSet is better suited to stateful workloads that require persistent storage on each cluster node, such as databases and other identity-sensitive workloads. A Deployment, on the other hand, is suitable for stateless workloads that use multiple replicas of one pod, such as web servers like Nginx and Apache.

Is REST API stateless or stateful? 
A. REST APIs are stateless because, rather than relying on the server remembering previous requests, REST applications require each request to contain all of the information necessary for the server to understand it.

Is LDAP stateless?
LDAP connections are stateful and persistent, which means they must be opened before operations are performed and then closed when no longer needed.

why replicaset has hash value ? 
when replicaset set will be created it will give type as name (type=app) and older also has type as name (type=app) so how will it get to know which pod is of which replicaset so kubernetes deployment provides unique value replicaset for difference which is called hash value

Volume create filesystem inside the pod thats why we dont use volume.and we dont want that because if pod get deleted complete date will be deleted.
to overcome volume we use persistent volume.

persistent volume exist in local machine thats why its not deleted only pod get deleted.

How do I schedule a pod without a scheduler?
You can manually assign pods to node itself. Well without a scheduler, to schedule pod is to set nodeName property in your pod definition file while creating a pod.

Node Affinity ensures that pods are hosted on particular nodes.
Pod Affinity ensures two pods to be co-located in a single node.

1. Does traffic actually pass through kube proxy?

2. Which component assigns IPs to the pods?

3. Can components like kubelet, scheduler and kube proxy talk to etcd directly.
Ans: No

4. If api server is not available for few seconds will it impact running pods?
Ans: No

5. If the kube proxy dies for few second will it cause issue in existing traffic routing?
Ans: No

1. What is the relation between deployments, replicasets, and pods?
Ans: A deployment configures a replicaset which will specify what configurarion will the pods have

2. Can two containers in one pod talk to each other? If yes/no then why?
Ans: yes, because they are two processes in the same machine, they can talk to eachother thru localhost but they cant use the same ports.

3. Can you mention all the components of the control plane?
Ans: api server, kubelet, kubeproxy, dns, etcd, scheduler

4. Can you mention all the components required to run a worker node?
Ans: kubelet and kubeproxy, CNI plugin

5. Is etcd consistence or available?
Ans: etcd is consistent, but is not HA.

1. When you have a lot of services which mode of kube proxy is preferred to use? iptables or IPVS
Ans: IPVS - as ipvs doesn't increase the iptable rules at a pace of iptables , for higher service more scalable

2. Who is responsible for doing health checks on the containers?
Ans: Kubelet

3. What is an overlay network?
Ans: overlay networking - wrapping some layers of network over the existing tcp-ip stack

4. How will you scale coredns[DNS Resolution] for large deployments?
Ans: we can cache the results of dns queries to specific nodes , using Nodelocal DNS , reducing the load on coreDNS making it scalable 

5. What is a CSI?
Ans: Container storage interface 



